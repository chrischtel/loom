# Loom Compiler Build Configuration
package(default_visibility = ["//visibility:public"])

# Core compiler library
cc_library(
    name = "compiler_lib",
    srcs = [
        "lexer.cc",
        "parser.cc", 
        "ast.cc",
        "semantic_analyzer.cc",
        "code_generator.cc",
        "error_reporter.cc",
    ],
    hdrs = [
        "lexer.h",
        "parser.h",
        "ast.h", 
        "semantic_analyzer.h",
        "code_generator.h",
        "error_reporter.h",
        "compiler.h",
    ],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/container:flat_hash_set",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
    ],
    # Add include directories if needed
    includes = ["."],
)

# Lexer component
cc_library(
    name = "lexer",
    srcs = ["lexer.cc"],
    hdrs = ["lexer.h"],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/status:statusor",
    ],
)

# Parser component  
cc_library(
    name = "parser",
    srcs = ["parser.cc"],
    hdrs = ["parser.h"],
    deps = [
        ":lexer",
        ":ast",
        "@com_google_absl//absl/status:statusor",
    ],
)

# AST representation
cc_library(
    name = "ast",
    srcs = ["ast.cc"],
    hdrs = ["ast.h"],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/memory",
    ],
)

# Semantic analysis
cc_library(
    name = "semantic_analyzer", 
    srcs = ["semantic_analyzer.cc"],
    hdrs = ["semantic_analyzer.h"],
    deps = [
        ":ast",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/status",
    ],
)

# Code generation
cc_library(
    name = "code_generator",
    srcs = ["code_generator.cc"],
    hdrs = ["code_generator.h"],
    deps = [
        ":ast",
        "@com_google_absl//absl/strings",
        # Add LLVM deps here if using LLVM:
        # "@llvm-project//llvm:Core",
        # "@llvm-project//llvm:IRReader", 
    ],
)

# Main compiler binary
cc_binary(
    name = "main",
    srcs = ["main.cc"],
    deps = [
        #":compiler_lib",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/strings",
    ],
)
